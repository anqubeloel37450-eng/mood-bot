# -*- coding: utf-8 -*-

import logging
import os
from datetime import datetime
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pandas as pd

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
DATA_FILE = "mood_data.csv"
USERS_FILE = "users.csv"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
SELECT_PROFESSION = 0
QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5 = range(1, 6)

# --- –°–ü–ò–°–û–ö –ü–†–û–§–ï–°–°–ò–ô –ò –ö–õ–ê–í–ò–ê–¢–£–†–ê ---
PROFESSIONS = [
    ["–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞", "–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞"],
    ["–í—Ä–∞—á", "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞"],
    ["–†–∞–±–æ—Ç–Ω–∏–∫ –∫—É—Ö–Ω–∏", "–†–∞–±–æ—Ç–Ω–∏–∫ –ê–•–û"],
    ["–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ—Ü. —Ä–∞–±–æ—Ç–µ"],
    ["–ü–µ–¥–∞–≥–æ–≥ (–ø—Å–∏—Ö–æ–ª–æ–≥)", "–ü–µ–¥–∞–≥–æ–≥ (–ª–æ–≥–æ–ø–µ–¥)"],
    ["–ü–µ–¥–∞–≥–æ–≥ (–¥–µ—Ñ–µ–∫—Ç–æ–ª–æ–≥)", "–ü–µ–¥–∞–≥–æ–≥ (–ü–î–û)"],
    ["–ü–µ–¥–∞–≥–æ–≥ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)", "–ü–µ–¥–∞–≥–æ–≥ (–ê–§–ö)"],
    ["–ü–µ–¥–∞–≥–æ–≥ (–º—É–∑. —Ä—É–∫.)", "–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å"],
    ["–ü–æ–º–æ—â–Ω–∏–∫ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è", "–ú–ª–∞–¥—à–∏–π –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å"],
    ["–ö–∞–¥—Ä–æ–≤—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä/–≠–∫–æ–Ω–æ–º–∏—Å—Ç"],
    ["–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ê–£–ü", "–í–æ–¥–∏—Ç–µ–ª—å"]
]
PROFESSION_MARKUP = ReplyKeyboardMarkup(PROFESSIONS, one_time_keyboard=True, resize_keyboard=True)
FLAT_PROFESSIONS = [prof for sublist in PROFESSIONS for prof in sublist]


# --- –ë–õ–û–ö –° –í–û–ü–†–û–°–ê–ú–ò –ò –û–¢–í–ï–¢–ê–ú–ò ---
QUIZZES = {
    "morning": {
        "intro": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚ú® –ú–Ω–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å. –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –±—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å.",
        "questions": [
            "–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–µ–≥–æ —Å–Ω–∞?",
            "–° –∫–∞–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ —è—Å–Ω—ã —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
            "–ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –≤ —Å–µ–±–µ —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á?",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å?",
        ],
    },
    "day": {
        "intro": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–π –¥–µ–Ω—å? ‚òïÔ∏è –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É –∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É.",
        "questions": [
            "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–±–æ—Ç–æ–π?",
            "–ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–ª–ª–µ–≥?",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∑–∞–¥–∞—á–∞–º–∏?",
            "–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞?",
            "–•–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–µ–±–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã?",
        ],
    },
    "evening": {
        "intro": "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. üåÖ –ü–æ–¥–µ–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
        "questions": [
            "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –±—ã–ª —Ç–≤–æ–π —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å?",
            "–î–æ–≤–æ–ª–µ–Ω –ª–∏ —Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã —Å–µ–≥–æ–¥–Ω—è?",
            "–û—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É —Ç–µ–±—è —Å–∏–ª—ã –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–µ –¥–µ–ª–∞ –∏ —Ö–æ–±–±–∏?",
            "–ë—ã–ª–∏ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–∏ –∏–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤?",
            "–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è?",
        ],
    },
}

ANSWERS = {
    "–ü–ª–æ—Ö–æ/–ù–µ—Ç": 1,
    "–ù–æ—Ä–º–∞–ª—å–Ω–æ/–ß–∞—Å—Ç–∏—á–Ω–æ": 2,
    "–û—Ç–ª–∏—á–Ω–æ/–î–∞": 3,
}
REPLY_KEYBOARD = [list(ANSWERS.keys())]
MARKUP = ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True)

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ---

def get_users_df():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DataFrame —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π."""
    if not os.path.exists(USERS_FILE):
        return pd.DataFrame(columns=["user_id", "profession"])
    return pd.read_csv(USERS_FILE)

def save_user(user_id, profession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π."""
    df = get_users_df()
    if user_id not in df["user_id"].values:
        new_user = pd.DataFrame([{"user_id": user_id, "profession": profession}])
        df = pd.concat([df, new_user], ignore_index=True)
        df.to_csv(USERS_FILE, index=False)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π '{profession}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    df = get_users_df()
    return df["user_id"].tolist()

def get_user_info(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—é)."""
    df = get_users_df()
    user_data = df[df["user_id"] == user_id]
    if not user_data.empty:
        return user_data.iloc[0]
    return None

def save_answer(user_id, quiz_type, question_index, answer, score):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_info = get_user_info(user_id)
    profession = user_info['profession'] if user_info is not None else "Unknown"

    if not os.path.exists(DATA_FILE):
        df = pd.DataFrame(columns=["timestamp", "user_id", "profession", "quiz_type", "question", "answer", "score"])
        df.to_csv(DATA_FILE, index=False)
    
    question_text = QUIZZES[quiz_type]['questions'][question_index]
    new_data = pd.DataFrame([{
        "timestamp": datetime.now(),
        "user_id": user_id,
        "profession": profession,
        "quiz_type": quiz_type,
        "question": question_text,
        "answer": answer,
        "score": score
    }])
    
    df_data = pd.read_csv(DATA_FILE)
    df_data = pd.concat([df_data, new_data], ignore_index=True)
    df_data.to_csv(DATA_FILE, index=False)

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user = update.effective_user
    user_info = get_user_info(user.id)
    
    if user_info is not None:
        await update.message.reply_html(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.mention_html()}! –Ø —É–∂–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å - {user_info['profession']}. –ü—Ä–æ—Å—Ç–æ –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END
    else:
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. "
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
            reply_markup=PROFESSION_MARKUP,
        )
        return SELECT_PROFESSION

async def select_profession(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    user = update.effective_user
    profession = update.message.text
    
    if profession not in FLAT_PROFESSIONS:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
            reply_markup=PROFESSION_MARKUP,
        )
        return SELECT_PROFESSION

    save_user(user.id, profession)
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª, —á—Ç–æ —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å - {profession}. "
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

async def force_start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑ –ø–æ –∫–æ–º–∞–Ω–¥–µ /quiz, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."""
    user = update.effective_user
    user_info = get_user_info(user.id)
    
    if user_info is None:
        await update.message.reply_text(
            "–Ø —Ç–µ–±—è –µ—â–µ –Ω–µ –∑–Ω–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        quiz_type = "morning"
    elif 12 <= current_hour < 17:
        quiz_type = "day"
    else:
        quiz_type = "evening"
    
    context.user_data["quiz_type"] = quiz_type
    context.user_data["current_question"] = 0
    
    await update.message.reply_text(
        QUIZZES[quiz_type]["intro"],
        reply_markup=ReplyKeyboardRemove()
    )
    await update.message.reply_text(
        QUIZZES[quiz_type]["questions"][0],
        reply_markup=MARKUP,
    )
    return QUESTION_1

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text
    if answer not in ANSWERS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=MARKUP)
        return context.user_data["current_question"] + 1

    user_id = update.effective_user.id
    quiz_type = context.user_data["quiz_type"]
    question_index = context.user_data["current_question"]
    score = ANSWERS[answer]
    
    save_answer(user_id, quiz_type, question_index, answer, score)

    question_index += 1
    context.user_data["current_question"] = question_index

    if question_index < len(QUIZZES[quiz_type]["questions"]):
        await update.message.reply_text(
            QUIZZES[quiz_type]["questions"][question_index],
            reply_markup=MARKUP,
        )
        return question_index + 1 
    else:
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä",
            reply_markup=ReplyKeyboardRemove(),
        )
        context.user_data.clear()
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def send_quiz(bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–≤–∏–∑–µ."""
    user_ids = get_all_users()
    logger.info(f"–ü–ª–∞–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–≤–∏–∑–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"–í—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å! –ù–∞–∂–º–∏—Ç–µ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def post_init(application: Application) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_quiz, 'cron', day_of_week='mon-fri', hour=10, minute=0, args=[application.bot])
    scheduler.add_job(send_quiz, 'cron', day_of_week='mon-fri', hour=14, minute=0, args=[application.bot])
    scheduler.add_job(send_quiz, 'cron', day_of_week='mon-fri', hour=18, minute=0, args=[application.bot])
    scheduler.start()


# --- –ù–û–í–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –ß–ï–†–ï–ó WEBHOOK ---
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook."""
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ SELECT_PROFESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_profession)], },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    quiz_handler = ConversationHandler(
        entry_points=[CommandHandler("quiz", force_start_quiz)],
        states={
            QUESTION_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(registration_handler)
    application.add_handler(quiz_handler)

    # --- –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK ---
    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL
    # –∏ –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT
    WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL")
    PORT = int(os.environ.get("PORT", "8443")) # –ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç Render

    if not WEBHOOK_URL:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ RENDER_EXTERNAL_URL. –ó–∞–ø—É—Å–∫–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ Polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.")
        application.run_polling()
        return

    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ {WEBHOOK_URL}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        secret_token="A_SECRET_TOKEN_TO_PREVENT_UNAUTHORIZED_ACCESS", # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        webhook_url=WEBHOOK_URL
    )
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {PORT}")


if __name__ == "__main__":
    main()

